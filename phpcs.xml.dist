<?xml version="1.0"?>
<ruleset name="Sorriso D'ambrosio Coding Standards">
	<!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<!-- See https://github.com/WordPress/WordPress-Coding-Standards -->
	<!-- See https://github.com/WPTRT/WPThemeReview -->
	<!-- See https://github.com/PHPCompatibility/PHPCompatibilityWP -->
	<!--Set the memory limit to 256M.
	    for most standar PHP configurations, this means the memory limit will temporarily be raised.
	-->
	<ini name="memory_limit" value="256M"/>
	<!--Whenever possible, cache the sacn results and re-use those for unchanged files on the next scan.-->
	<arg name="cache" value="phpcs-cache" />

	<!-- Set a description for this ruleset. -->
	<description>A custom set of code standard rules to check for WordPress themes.</description>
	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<!-- Pass some flags to PHPCS:
		 p flag: Show progress of the run.
		 s flag: Show sniff codes in all reports.
		 v flag: Print verbose output.
		 n flag: Don't Show Warnings. 
	-->
	<arg value="ps"/>
	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>
	<!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="20"/>
	<!-- Check PHP files only. JavaScript and CSS files are checked separately using the @wordpress/scripts package. -->
	<arg name="extensions" value="php"/>
	<!--Show colors in console-->
	<arg name="colors"/>

	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

	<!-- Exclude patterns. -->
	<exclude-pattern>/vendor/*</exclude-pattern>
	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/inc/bs5navwalker.php</exclude-pattern>

	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION
	#############################################################################
	-->
	<!-- Verify that the text_domain is set to the desired text-domain.
		 Multiple valid text domains can be provided as a comma-delimited list. -->

	
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array" value="sorrisodambrosio"/>
		</properties>
	</rule>

	<!-- Allow for theme specific exceptions to the file name rules based
		 on the theme hierarchy. -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="is_theme" value="true"/>
		</properties>
	</rule>

	<!-- Set the minimum supported WP version. This is used by several sniffs.
		 The minimum version set here should be in line with the minimum WP version
		 as set in the "Requires at least" tag in the readme.txt file. -->
	<rule ref="WordPress.WP.DeprecatedFunctions">
        <properties>
		    <property name="minimum_supported_version" value="5.6"/>
		</properties>
	</rule>	 

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<!-- No need to adjust alignment of large arrays when the item with the largest key is removed. -->
			<property name="exact" value="false"/>
			<!-- Don't align multi-line items if ALL items in the array are multi-line. -->
			<property name="alignMultilineItems" value="!=100"/>
			<!-- Array assignment operator should always be on the same line as the array key. -->
			<property name="ignoreNewlines" value="false"/>
		</properties>
	</rule>

	<!-- Verify that everything in the global namespace is prefixed with a theme specific prefix.
		 Multiple valid prefixes can be provided as a comma-delimited list. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array" value="sorrisodambrosio_" />
		</properties>
	</rule>
	<!--Use Wordpress "Extra" Coding Standars-->
	<rule ref="WordPress-Extra">
	    <exclude name="WordPress.FilesFileName.InvalidClassFileName"/>
		<exclude name="WordPress.FilesFileName.NoHyphenatedLowercase"/>
		<exclude name="WordPress.WhiteSpace.PrecisionAlignment.Found"/>
	</rule>
	<!--Let's also check that everything is properly documented-->
	<rule ref="WordPress-Docs"/>
	<!--Add in some extra rules from other standars-->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionsParameter"/>
	<rule ref="Generic.Commenting.Todo"/>

	<!--
	#############################################################################
	USE THE PHPCompatibility RULESET
	#############################################################################
	-->
	<!--WordPress Core currently suppots PHP 7.4+.-->
	
	<config name="testVersion" value="5.6-"/>
	<rule ref="PHPCompatibilityWP">
	    <exclude name="Squiz.Commenting.FileComment.WrongStyle"/>
		<exclude name="PHPCompatibility.FunctionDeclaration.NewParamTypeDeclarations.stringFound"/>
		<exclude name="PHPCompatibility.FunctionDeclaration.NewParamTypeDeclarations.intFound"/>
		<exclude name="PHPCompatibility.FunctionUse.NewFunctionParameters.htmlspecialchars_double_encodeFound"/>
		<exclude name="PHPCompatibility.Sintax.NewFunctionArrayDereferencing.Found"/>
		<exclude name="WordPress.PHP.StrictArray.MissingTrueStrict" />
		<exclude name="WordPress.PHP.StrictComparisons.LooseComparison" />
		<exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact" />
	</rule>
	<rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
	    <type>warning</type>
		<exclude name="Squiz.PHP.CommentedOutCode.Found"/>
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
	</rule>	
</ruleset>
